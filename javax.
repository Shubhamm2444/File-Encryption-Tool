import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.nio.file.Files;
import java.util.Base64;

public class FileEncryptionTool {
    private static final String ALGORITHM = "AES";
    private static SecretKey secretKey;

    public static void main(String[] args) {
        JFrame frame = new JFrame("File Encryption Tool");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());

        JButton encryptButton = new JButton("Encrypt File");
        JButton decryptButton = new JButton("Decrypt File");
        JLabel messageLabel = new JLabel();

        encryptButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                File file = selectFile();
                if (file != null) {
                    try {
                        String content = new String(Files.readAllBytes(file.toPath()));
                        String encrypted = encrypt(content);
                        writeToFile(file.getPath() + ".enc", encrypted);
                        messageLabel.setText("File encrypted successfully!");
                    } catch (Exception ex) {
                        messageLabel.setText("Error encrypting file: " + ex.getMessage());
                    }
                }
            }
        });

        decryptButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                File file = selectFile();
                if (file != null) {
                    try {
                        String encryptedContent = new String(Files.readAllBytes(file.toPath()));
                        String decrypted = decrypt(encryptedContent);
                        writeToFile(file.getPath().replace(".enc", ""), decrypted);
                        messageLabel.setText("File decrypted successfully!");
                    } catch (Exception ex) {
                        messageLabel.setText("Error decrypting file: " + ex.getMessage());
                    }
                }
            }
        });

        frame.add(encryptButton);
        frame.add(decryptButton);
        frame.add(messageLabel);
        frame.setVisible(true);

        generateKey();
    }

    private static void generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);
        keyGen.init(128); // You can also use 256
        secretKey = keyGen.generateKey();
    }

    private static String encrypt(String data) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedData = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encryptedData);
    }

    private static String decrypt(String encryptedData) throws Exception {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decodedData = Base64.getDecoder().decode(encryptedData);
        byte[] originalData = cipher.doFinal(decodedData);
        return new String(originalData);
    }

    private static File selectFile() {
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(null);
        return option == JFileChooser.APPROVE_OPTION ? fileChooser.getSelectedFile() : null;
    }

    private static void writeToFile(String filePath, String content) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
